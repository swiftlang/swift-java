//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2024 Apple Inc. and the Swift.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

plugins {
  id("build-logic.java-library-conventions")
}

group = "org.swift.javakit"
version = "1.0-SNAPSHOT"

repositories {
  mavenCentral()
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(22))
  }
}

dependencies {
  implementation("dev.gradleplugins:gradle-api:8.10.1")

  testImplementation(platform("org.junit:junit-bom:5.10.0"))
  testImplementation("org.junit.jupiter:junit-jupiter")
}

tasks.test {
  useJUnitPlatform()
  testLogging {
    events("passed", "skipped", "failed")
  }
}

// Copy the gradle wrapper we're using into the resulting jar's resources.
// We'll use it to bootstrap dependencies (and gradle!) if there is none yet.
tasks.processResources {
  from('gradlew') {
    into 'gradle/'
  }
  from('gradlew.bat') {
    into 'gradle/'
  }
  from('../gradle/wrapper/gradle-wrapper.jar') {
    into 'gradle/wrapper/'
  }
  from('../gradle/wrapper/gradle-wrapper.properties') {
    into 'gradle/wrapper/'
  }
}

//task fatJar(type: Jar) {
//    archiveBaseName = 'java-kit-fat-jar'
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}

// Task necessary to bootstrap
task printRuntimeClasspath {
    def runtimeClasspath = sourceSets.main.runtimeClasspath
    inputs.files(runtimeClasspath)
    doLast {
        println("CLASSPATH:${runtimeClasspath.asPath}")
    }
}
