//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Swift.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import JExtractSwiftLib
import Testing

@Suite
struct JNIClassTests {
  let source = """
    public class MyClass {
      let x: Int64
      let y: Int64
  
      public static func method() {}
  
      public init(x: Int64, y: Int64) {
        self.x = y
        self.y = y
      }
  
      public init() {
        self.x = 0
        self.y = 0
      }
  
      public func doSomething(x: Int64) {}
    }
  """

  @Test
  func generatesJavaClass() throws {
    try assertOutput(input: source, .jni, .java, expectedChunks: [
      """
      // Generated by jextract-swift
      // Swift module: SwiftModule

      package com.example.swift;
      
      import org.swift.swiftkit.core.*;
      import org.swift.swiftkit.core.util.*;

      public final class MyClass extends JNISwiftInstance {
        static final String LIB_NAME = "SwiftModule";
      
        @SuppressWarnings("unused")
        private static final boolean INITIALIZED_LIBS = initializeLibs();
        static boolean initializeLibs() {
          System.loadLibrary(LIB_NAME);
          return true;
        }
      
        public MyClass(long selfPointer, SwiftArena swiftArena) {
          super(selfPointer, swiftArena);
        }
      """,
      """
      private static native void $destroy(long selfPointer);
      """,
      """
      @Override
      protected Runnable $createDestroyFunction() {
        long self$ = this.$memoryAddress();
        if (CallTraces.TRACE_DOWNCALLS) {
          CallTraces.traceDowncall("MyClass.$createDestroyFunction",
              "this", this,
              "self", self$);
        }
        return new Runnable() {
          @Override
          public void run() {
            if (CallTraces.TRACE_DOWNCALLS) {
              CallTraces.traceDowncall("MyClass.$destroy", "self", self$);
            }
            MyClass.$destroy(self$);
          }
        };
      """
    ])
  }

  @Test
  func staticMethod_javaBindings() throws {
    try assertOutput(
      input: source,
      .jni,
      .java,
      expectedChunks: [
        """
        /**
          * Downcall to Swift:
          * {@snippet lang=swift :
          * public static func method()
          * }
          */
        public static native void method();
        """
      ]
    )
  }

  @Test
  func staticMethod_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyClass_method__")
        func Java_com_example_swift_MyClass_method__(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass) {
          MyClass.method()
        }
        """
      ]
    )
  }

  @Test
  func initializer_javaBindings() throws {
    try assertOutput(
      input: source,
      .jni,
      .java,
      expectedChunks: [
        """
        /**
          * Downcall to Swift:
          * {@snippet lang=swift :
          * public init(x: Int64, y: Int64)
          * }
          */
        public static MyClass init(long x, long y, SwiftArena swiftArena$) {
          long self$ = MyClass.allocatingInit(x, y);
          return new MyClass(self$, swiftArena$);
        }
        """,
        """
        /**
          * Downcall to Swift:
          * {@snippet lang=swift :
          * public init()
          * }
          */
        public static MyClass init(SwiftArena swiftArena$) {
          long self$ = MyClass.allocatingInit();
          return new MyClass(self$, swiftArena$);
        }
        """,
        """
        private static native long allocatingInit(long x, long y);
        """,
        """
        private static native long allocatingInit();
        """
      ]
    )
  }

  @Test
  func initializer_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyClass_allocatingInit__")
        func Java_com_example_swift_MyClass_allocatingInit__(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass) -> jlong {
          let self$ = UnsafeMutablePointer<MyClass>.allocate(capacity: 1)
          self$.initialize(to: MyClass())
          return Int64(Int(bitPattern: self$)).getJNIValue(in: environment)
        }
        """,
        """
        @_cdecl("Java_com_example_swift_MyClass_allocatingInit__JJ")
        func Java_com_example_swift_MyClass_allocatingInit__JJ(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass, x: jlong, y: jlong) -> jlong {
          let self$ = UnsafeMutablePointer<MyClass>.allocate(capacity: 1)
          self$.initialize(to: MyClass(x: Int64(fromJNI: x, in: environment!), y: Int64(fromJNI: y, in: environment!)))
          return Int64(Int(bitPattern: self$)).getJNIValue(in: environment)
        }
        """
      ]
    )
  }

  @Test
  func destroyFunction_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyClass__00024destroy__J")
        func Java_com_example_swift_MyClass__00024destroy__J(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass, selfPointer: jlong) {
          guard let env$ = environment else {
            fatalError("Missing JNIEnv in downcall to \\(#function)")
          }
          assert(selfPointer != 0, "selfPointer memory address was null")
          let selfBits$ = Int(Int64(fromJNI: selfPointer, in: env$))
          guard let self$ = UnsafeMutablePointer<MyClass>(bitPattern: selfBits$) else {
            fatalError("self memory address was null in call to \\(#function)!")
          }
          self$.deinitialize(count: 1)
          self$.deallocate()
        }
        """
      ]
    )
  }

  @Test
  func memberMethod_javaBindings() throws {
    try assertOutput(
      input: source,
      .jni,
      .java,
      expectedChunks: [
        """
        /**
         * Downcall to Swift:
         * {@snippet lang=swift :
         * public func doSomething(x: Int64)
         * }
         */
        public void doSomething(long x) {
          long self$ = this.$memoryAddress();
          MyClass.$doSomething(x, self$);
        }
        """,
        """
        private static native void $doSomething(long x, long selfPointer);
        """
      ]
    )
  }

  @Test
  func memberMethod_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyClass__00024doSomething__JJ")
        func Java_com_example_swift_MyClass__00024doSomething__JJ(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass, x: jlong, selfPointer: jlong) {
          guard let env$ = environment else {
            fatalError("Missing JNIEnv in downcall to \\(#function)")
          }
          assert(selfPointer != 0, "selfPointer memory address was null")
          let selfBits$ = Int(Int64(fromJNI: selfPointer, in: env$))
          guard let self$ = UnsafeMutablePointer<MyClass>(bitPattern: selfBits$) else {
            fatalError("self memory address was null in call to \\(#function)!")
          }
          self$.pointee.doSomething(x: Int64(fromJNI: x, in: environment!))
        }
        """,
      ]
    )
  }
}
