//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Swift.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import JExtractSwiftLib
import Testing

@Suite
struct JNIClassTests {
  let source = """
    public class MyClass {
      let x: Int64
      let y: Int64
  
      public static func method() {}
  
      public init(x: Int64, y: Int64) {
        self.x = y
        self.y = y
      }
  
      public init() {
        self.x = 0
        self.y = 0
      }
    }
  """

  @Test
  func generatesJavaClass() throws {
    try assertOutput(input: source, .jni, .java, expectedChunks: [
      """
      // Generated by jextract-swift
      // Swift module: SwiftModule

      package com.example.swift;

      public final class MyClass {
        static final String LIB_NAME = "SwiftModule";
      
        @SuppressWarnings("unused")
        private static final boolean INITIALIZED_LIBS = initializeLibs();
        static boolean initializeLibs() {
          System.loadLibrary(LIB_NAME);
          return true;
        }
      
        private long selfPointer;
      
        private MyClass(long selfPointer) {
          this.selfPointer = selfPointer;
        }
      """,
    ])
  }

  @Test
  func staticMethod_javaBindings() throws {
    try assertOutput(
      input: source,
      .jni,
      .java,
      expectedChunks: [
        """
        /**
          * Downcall to Swift:
          * {@snippet lang=swift :
          * public static func method()
          * }
          */
        public static native void method();
        """
      ]
    )
  }

  @Test
  func staticMethod_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyClass_method__")
        func Java_com_example_swift_MyClass_method__(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass) {
          MyClass.method()
        }
        """
      ]
    )
  }

  @Test
  func initializer_javaBindings() throws {
    try assertOutput(
      input: source,
      .jni,
      .java,
      expectedChunks: [
        """
        /**
          * Downcall to Swift:
          * {@snippet lang=swift :
          * public init(x: Int64, y: Int64)
          * }
          */
        public static MyClass init(long x, long y) {
          long selfPointer = MyClass.allocatingInit(x, y);
          return new MyClass(selfPointer);
        }
        """,
        """
        /**
          * Downcall to Swift:
          * {@snippet lang=swift :
          * public init()
          * }
          */
        public static MyClass init() {
          long selfPointer = MyClass.allocatingInit();
          return new MyClass(selfPointer);
        }
        """,
        """
        private static native long allocatingInit(long x, long y);
        """,
        """
        private static native long allocatingInit();
        """
      ]
    )
  }

  @Test
  func initializer_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyClass_allocatingInit__")
        func Java_com_example_swift_MyClass_allocatingInit__(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass) -> jlong {
          let selfPointer = UnsafeMutablePointer<MyClass>.allocate(capacity: 1)
          selfPointer.initialize(to: MyClass())
          return Int64(Int(bitPattern: selfPointer)).getJNIValue(in: environment)
        }
        """,
        """
        @_cdecl("Java_com_example_swift_MyClass_allocatingInit__JJ")
        func Java_com_example_swift_MyClass_allocatingInit__JJ(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass, x: jlong, y: jlong) -> jlong {
          let selfPointer = UnsafeMutablePointer<MyClass>.allocate(capacity: 1)
          selfPointer.initialize(to: MyClass(x: Int64(fromJNI: x, in: environment!), y: Int64(fromJNI: y, in: environment!)))
          return Int64(Int(bitPattern: selfPointer)).getJNIValue(in: environment)
        }
        """
      ]
    )
  }
}
