//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2024 Apple Inc. and the Swift.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

plugins {
    id("build-logic.java-application-conventions")
    id("maven-publish")
}

group = "org.swift.swiftkit"
version = "1.0-SNAPSHOT"
base {
    archivesName = "swiftkit-ffm"
}

repositories {
    mavenLocal()
    mavenCentral()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = 'swiftkit-ffm'
            version = '1.0-SNAPSHOT'

            from components.java
        }
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(25))
    }
}

dependencies {
    implementation(project(':SwiftKitCore'))

    testRuntimeOnly("org.junit.platform:junit-platform-launcher") // TODO: workaround for not finding junit: https://github.com/gradle/gradle/issues/34512
    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

testing {
    suites {
        test {
            useJUnitJupiter('5.10.3')
        }
    }
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

/// Enable access to preview APIs, e.g. java.lang.foreign.* (Panama)
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("--enable-preview")
    options.compilerArgs.add("-Xlint:preview")
}

// SwiftKit depends on SwiftKitSwift (Swift library that this Java library calls into)

def compileSwift = tasks.register("compileSwift", Exec) {
    description "Compile the swift-java SwiftKitSwift dynamic library that SwiftKit (Java) calls into"

    inputs.file(new File(rootDir, "Package.swift"))
    inputs.dir(new File(rootDir, "Sources/")) // a bit generous, but better safe than sorry, and include all Swift source changes
    outputs.dir(new File(rootDir, ".build"))

    workingDir = rootDir
    commandLine "swift"
    args("build", "--target", "SwiftKitSwift")
}
tasks.build {
    dependsOn("compileSwift")
}



def cleanSwift = tasks.register("cleanSwift", Exec) {
    workingDir = rootDir
    commandLine "swift"
    args("package", "clean")
}
tasks.clean {
    dependsOn("cleanSwift")
}

