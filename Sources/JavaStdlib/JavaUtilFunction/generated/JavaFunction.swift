// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaInterface("java.util.function.Function")
public struct JavaFunction<T: AnyJavaObject, R: AnyJavaObject> {
  @JavaMethod
  public func apply(_ arg0: JavaObject?) -> JavaObject?

  @JavaMethod
  public func compose(_ arg0: JavaFunction<JavaObject, JavaObject>?) -> JavaFunction<
    JavaObject, JavaObject
  >?

  @JavaMethod
  public func andThen(_ arg0: JavaFunction<JavaObject, JavaObject>?) -> JavaFunction<
    JavaObject, JavaObject
  >?
}
extension JavaClass {
  @JavaStaticMethod
  public func identity<T: AnyJavaObject, R: AnyJavaObject>() -> JavaFunction<
    JavaObject, JavaObject
  >? where ObjectType == JavaFunction<T, R>
}
