// Auto-generated by Java-to-Swift wrapper generator.
import SwiftJava
import CJNI

@JavaClass("java.io.InputStream", implements: Closeable.self)
open class InputStream: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func reset() throws

  @JavaMethod
  open func read(_ arg0: [Int8]) throws -> Int32

  @JavaMethod
  open func read(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws -> Int32

  @JavaMethod
  open func read() throws -> Int32

  @JavaMethod
  open func close() throws

  @JavaMethod
  open func readAllBytes() throws -> [Int8]

  @JavaMethod
  open func mark(_ arg0: Int32)

  @JavaMethod
  open func readNBytes(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws -> Int32

  @JavaMethod
  open func readNBytes(_ arg0: Int32) throws -> [Int8]

  @JavaMethod
  open func transferTo(_ arg0: OutputStream?) throws -> Int64

  @JavaMethod
  open func skip(_ arg0: Int64) throws -> Int64

  @JavaMethod
  open func available() throws -> Int32

  @JavaMethod
  open func markSupported() -> Bool

  @JavaMethod
  open func skipNBytes(_ arg0: Int64) throws
}
extension JavaClass<InputStream> {
  @JavaStaticMethod
  public func nullInputStream() -> InputStream!
}
