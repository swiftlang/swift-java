// Auto-generated by Java-to-Swift wrapper generator.
import SwiftJava
import CJNI

@JavaClass("java.io.File")
open class File: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: File?, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getName() -> String

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open func length() -> Int64

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func isHidden() -> Bool

  @JavaMethod
  open func compareTo(_ arg0: File?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func list() -> [String]

  @JavaMethod
  open func isAbsolute() -> Bool

  @JavaMethod
  open func getParent() -> String

  @JavaMethod
  open func delete() -> Bool

  @JavaMethod
  open func setReadOnly() -> Bool

  @JavaMethod
  open func canRead() -> Bool

  @JavaMethod
  open func getPath() -> String

  @JavaMethod
  open func getAbsolutePath() -> String

  @JavaMethod
  open func exists() -> Bool

  @JavaMethod
  open func createNewFile() throws -> Bool

  @JavaMethod
  open func renameTo(_ arg0: File?) -> Bool

  @JavaMethod
  open func isDirectory() -> Bool

  @JavaMethod
  open func getCanonicalPath() throws -> String

  @JavaMethod
  open func getAbsoluteFile() -> File!

  @JavaMethod
  open func mkdir() -> Bool

  @JavaMethod
  open func getCanonicalFile() throws -> File!

  @JavaMethod
  open func getParentFile() -> File!

  @JavaMethod
  open func mkdirs() -> Bool

  @JavaMethod
  open func setWritable(_ arg0: Bool) -> Bool

  @JavaMethod
  open func setWritable(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaMethod
  open func setReadable(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaMethod
  open func setReadable(_ arg0: Bool) -> Bool

  @JavaMethod
  open func setExecutable(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaMethod
  open func setExecutable(_ arg0: Bool) -> Bool

  @JavaMethod
  open func canWrite() -> Bool

  @JavaMethod
  open func isFile() -> Bool

  @JavaMethod
  open func lastModified() -> Int64

  @JavaMethod
  open func deleteOnExit()

  @JavaMethod
  open func listFiles() -> [File?]

  @JavaMethod
  open func setLastModified(_ arg0: Int64) -> Bool

  @JavaMethod
  open func canExecute() -> Bool

  @JavaMethod
  open func getTotalSpace() -> Int64

  @JavaMethod
  open func getFreeSpace() -> Int64

  @JavaMethod
  open func getUsableSpace() -> Int64

  @JavaMethod
  open func toPath() -> Path!
}
extension JavaClass<File> {
  @JavaStaticField(isFinal: true)
  public var separatorChar: UInt16

  @JavaStaticField(isFinal: true)
  public var separator: String

  @JavaStaticField(isFinal: true)
  public var pathSeparatorChar: UInt16

  @JavaStaticField(isFinal: true)
  public var pathSeparator: String

  @JavaStaticMethod
  public func listRoots() -> [File?]

  @JavaStaticMethod
  public func createTempFile(_ arg0: String, _ arg1: String) throws -> File!

  @JavaStaticMethod
  public func createTempFile(_ arg0: String, _ arg1: String, _ arg2: File?) throws -> File!
}
