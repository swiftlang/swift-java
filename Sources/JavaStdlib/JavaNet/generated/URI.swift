// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.net.URI")
open class URI: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: String, _ arg2: String, _ arg3: String, _ arg4: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: String, _ arg2: String, _ arg3: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: String, _ arg2: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: String, _ arg2: String, _ arg3: Int32, _ arg4: String, _ arg5: String, _ arg6: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: URI?) -> Int32

  @JavaMethod
  open func isAbsolute() -> Bool

  @JavaMethod
  open func resolve(_ arg0: String) -> URI!

  @JavaMethod
  open func resolve(_ arg0: URI?) -> URI!

  @JavaMethod
  open func getScheme() -> String

  @JavaMethod
  open func isOpaque() -> Bool

  @JavaMethod
  open func getRawAuthority() -> String

  @JavaMethod
  open func getRawFragment() -> String

  @JavaMethod
  open func getRawQuery() -> String

  @JavaMethod
  open func getRawPath() -> String

  @JavaMethod
  open func getHost() -> String

  @JavaMethod
  open func getPort() -> Int32

  @JavaMethod
  open func getAuthority() -> String

  @JavaMethod
  open func getQuery() -> String

  @JavaMethod
  open func getPath() -> String

  @JavaMethod
  open func getUserInfo() -> String

  @JavaMethod
  open func toURL() throws -> URL!

  @JavaMethod
  open func normalize() -> URI!

  @JavaMethod
  open func relativize(_ arg0: URI?) -> URI!

  @JavaMethod
  open func getRawSchemeSpecificPart() -> String

  @JavaMethod
  open func parseServerAuthority() throws -> URI!

  @JavaMethod
  open func getSchemeSpecificPart() -> String

  @JavaMethod
  open func getRawUserInfo() -> String

  @JavaMethod
  open func getFragment() -> String

  @JavaMethod
  open func toASCIIString() -> String
}
extension JavaClass<URI> {
  @JavaStaticMethod
  public func create(_ arg0: String) -> URI!
}
