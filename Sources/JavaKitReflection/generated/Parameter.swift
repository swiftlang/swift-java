// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.lang.reflect.Parameter")
open class Parameter: JavaObject {
  @JavaMethod
  open func getName() -> String

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func getModifiers() -> Int32

  @JavaMethod
  open func isSynthetic() -> Bool

  @JavaMethod
  open func getAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open func getAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open func getAnnotations() -> [Annotation?]

  @JavaMethod
  open func getDeclaredAnnotation(_ arg0: JavaClass<Annotation>?) -> Annotation!

  @JavaMethod
  open func getDeclaredAnnotationsByType(_ arg0: JavaClass<Annotation>?) -> [Annotation?]

  @JavaMethod
  open func getDeclaredAnnotations() -> [Annotation?]

  @JavaMethod
  open func getType() -> JavaClass<JavaObject>!

  @JavaMethod
  open func getAnnotatedType() -> AnnotatedType!

  @JavaMethod
  open func getParameterizedType() -> Type!

  @JavaMethod
  open func isVarArgs() -> Bool

  @JavaMethod
  open func isNamePresent() -> Bool

  @JavaMethod
  open func getDeclaringExecutable() -> Executable!

  @JavaMethod
  open func isImplicit() -> Bool
}
