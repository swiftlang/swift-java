// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.Class")
open class JavaClass<T: AnyJavaObject>: JavaObject {
  @JavaMethod
  open func getName() -> String

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func isAssignableFrom(_ arg0: JavaClass<JavaObject>?) -> Bool

  @JavaMethod
  open func isInstance(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open func getModifiers() -> Int32

  @JavaMethod
  open func isInterface() -> Bool

  @JavaMethod
  open func isArray() -> Bool

  @JavaMethod
  open func isPrimitive() -> Bool

  @JavaMethod
  open func isHidden() -> Bool

  @JavaMethod
  open func getSuperclass() -> JavaClass<JavaObject>!

  @JavaMethod
  open func cast(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open func componentType() -> JavaClass<JavaObject>!

  @JavaMethod
  open func getComponentType() -> JavaClass<JavaObject>!

  @JavaMethod
  open func isAnnotation() -> Bool

  @JavaMethod
  open func isEnum() -> Bool

  @JavaMethod
  open func isRecord() -> Bool

  @JavaMethod
  open func newInstance() throws -> JavaObject!

  @JavaMethod
  open func getInterfaces() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open func isMemberClass() -> Bool

  @JavaMethod
  open func isLocalClass() -> Bool

  @JavaMethod
  open func isAnonymousClass() -> Bool

  @JavaMethod
  open func getEnclosingClass() throws -> JavaClass<JavaObject>!

  @JavaMethod
  open func arrayType() -> JavaClass<JavaObject>!

  @JavaMethod
  open func getSimpleName() -> String

  @JavaMethod
  open func getCanonicalName() -> String

  @JavaMethod
  open func getPackageName() -> String

  @JavaMethod
  open func desiredAssertionStatus() -> Bool

  @JavaMethod
  open func getNestHost() -> JavaClass<JavaObject>!

  @JavaMethod
  open func descriptorString() -> String

  @JavaMethod
  open func getPermittedSubclasses() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open func toGenericString() -> String

  @JavaMethod
  open func isSynthetic() -> Bool

  @JavaMethod
  open func getSigners() -> [JavaObject?]

  @JavaMethod
  open func getDeclaringClass() throws -> JavaClass<JavaObject>!

  @JavaMethod
  open func getTypeName() -> String

  @JavaMethod
  open func getClasses() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open func getDeclaredClasses() throws -> [JavaClass<JavaObject>?]

  @JavaMethod
  open func getEnumConstants() -> [JavaObject?]

  @JavaMethod
  open func asSubclass(_ arg0: JavaClass<JavaObject>?) -> JavaClass<JavaObject>!

  @JavaMethod
  open func isNestmateOf(_ arg0: JavaClass<JavaObject>?) -> Bool

  @JavaMethod
  open func getNestMembers() -> [JavaClass<JavaObject>?]

  @JavaMethod
  open func isSealed() -> Bool
}
extension JavaClass {
  @JavaStaticMethod
  public func forName<T: AnyJavaObject>(_ arg0: String) throws -> JavaClass<JavaObject>! where ObjectType == JavaClass<T>

  @JavaStaticMethod
  public func forPrimitiveName<T: AnyJavaObject>(_ arg0: String) -> JavaClass<JavaObject>! where ObjectType == JavaClass<T>
}
