// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.Class")
public struct JavaClass<T: AnyJavaObject> {
  @JavaMethod
  public func getName() -> String

  @JavaMethod
  public func toString() -> String

  @JavaMethod
  public func isAssignableFrom(_ arg0: JavaClass<JavaObject>?) -> Bool

  @JavaMethod
  public func isInstance(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func getModifiers() -> Int32

  @JavaMethod
  public func isInterface() -> Bool

  @JavaMethod
  public func isArray() -> Bool

  @JavaMethod
  public func isPrimitive() -> Bool

  @JavaMethod
  public func isHidden() -> Bool

  @JavaMethod
  public func getSuperclass() -> JavaClass<JavaObject>?

  @JavaMethod
  public func cast(_ arg0: JavaObject?) -> JavaObject?

  @JavaMethod
  public func componentType() -> JavaClass<JavaObject>?

  @JavaMethod
  public func getComponentType() -> JavaClass<JavaObject>?

  @JavaMethod
  public func isAnnotation() -> Bool

  @JavaMethod
  public func isEnum() -> Bool

  @JavaMethod
  public func isRecord() -> Bool

  @JavaMethod
  public func newInstance() throws -> JavaObject?

  @JavaMethod
  public func getInterfaces() -> [JavaClass<JavaObject>?]

  @JavaMethod
  public func isMemberClass() -> Bool

  @JavaMethod
  public func isLocalClass() -> Bool

  @JavaMethod
  public func isAnonymousClass() -> Bool

  @JavaMethod
  public func getEnclosingClass() throws -> JavaClass<JavaObject>?

  @JavaMethod
  public func arrayType() -> JavaClass<JavaObject>?

  @JavaMethod
  public func getSimpleName() -> String

  @JavaMethod
  public func getCanonicalName() -> String

  @JavaMethod
  public func getPackageName() -> String

  @JavaMethod
  public func desiredAssertionStatus() -> Bool

  @JavaMethod
  public func getNestHost() -> JavaClass<JavaObject>?

  @JavaMethod
  public func descriptorString() -> String

  @JavaMethod
  public func getPermittedSubclasses() -> [JavaClass<JavaObject>?]

  @JavaMethod
  public func toGenericString() -> String

  @JavaMethod
  public func isSynthetic() -> Bool

  @JavaMethod
  public func getSigners() -> [JavaObject?]

  @JavaMethod
  public func getDeclaringClass() throws -> JavaClass<JavaObject>?

  @JavaMethod
  public func getTypeName() -> String

  @JavaMethod
  public func getClasses() -> [JavaClass<JavaObject>?]

  @JavaMethod
  public func getDeclaredClasses() throws -> [JavaClass<JavaObject>?]

  @JavaMethod
  public func getEnumConstants() -> [JavaObject?]

  @JavaMethod
  public func asSubclass(_ arg0: JavaClass<JavaObject>?) -> JavaClass<JavaObject>?

  @JavaMethod
  public func isNestmateOf(_ arg0: JavaClass<JavaObject>?) -> Bool

  @JavaMethod
  public func getNestMembers() -> [JavaClass<JavaObject>?]

  @JavaMethod
  public func isSealed() -> Bool

  @JavaMethod
  public func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func hashCode() -> Int32

  @JavaMethod
  public func getClass() -> JavaClass<JavaObject>?

  @JavaMethod
  public func notify()

  @JavaMethod
  public func notifyAll()

  @JavaMethod
  public func wait(_ arg0: Int64) throws

  @JavaMethod
  public func wait(_ arg0: Int64, _ arg1: Int32) throws

  @JavaMethod
  public func wait() throws
}
extension JavaClass {
  @JavaStaticMethod
  public func forName<T: AnyJavaObject>(_ arg0: String) throws -> JavaClass<JavaObject>? where ObjectType == JavaClass<T>

  @JavaStaticMethod
  public func forPrimitiveName<T: AnyJavaObject>(_ arg0: String) -> JavaClass<JavaObject>? where ObjectType == JavaClass<T>
}
