// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.Float")
open class JavaFloat: JavaNumber {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Double, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Float, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func isInfinite() -> Bool

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaFloat?) -> Int32

  @JavaMethod
  open override func byteValue() -> Int8

  @JavaMethod
  open override func shortValue() -> Int16

  @JavaMethod
  open override func intValue() -> Int32

  @JavaMethod
  open override func longValue() -> Int64

  @JavaMethod
  open override func floatValue() -> Float

  @JavaMethod
  open override func doubleValue() -> Double

  @JavaMethod
  open func isNaN() -> Bool
}
extension JavaClass<JavaFloat> {
  @JavaStaticField(isFinal: true)
  public var POSITIVE_INFINITY: Float

  @JavaStaticField(isFinal: true)
  public var NEGATIVE_INFINITY: Float

  @JavaStaticField(isFinal: true)
  public var NaN: Float

  @JavaStaticField(isFinal: true)
  public var MAX_VALUE: Float

  @JavaStaticField(isFinal: true)
  public var MIN_NORMAL: Float

  @JavaStaticField(isFinal: true)
  public var MIN_VALUE: Float

  @JavaStaticField(isFinal: true)
  public var SIZE: Int32

  @JavaStaticField(isFinal: true)
  public var PRECISION: Int32

  @JavaStaticField(isFinal: true)
  public var MAX_EXPONENT: Int32

  @JavaStaticField(isFinal: true)
  public var MIN_EXPONENT: Int32

  @JavaStaticField(isFinal: true)
  public var BYTES: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE: JavaClass<JavaFloat>!

  @JavaStaticMethod
  public func toString(_ arg0: Float) -> String

  @JavaStaticMethod
  public func hashCode(_ arg0: Float) -> Int32

  @JavaStaticMethod
  public func min(_ arg0: Float, _ arg1: Float) -> Float

  @JavaStaticMethod
  public func max(_ arg0: Float, _ arg1: Float) -> Float

  @JavaStaticMethod
  public func isInfinite(_ arg0: Float) -> Bool

  @JavaStaticMethod
  public func isFinite(_ arg0: Float) -> Bool

  @JavaStaticMethod
  public func floatToRawIntBits(_ arg0: Float) -> Int32

  @JavaStaticMethod
  public func floatToIntBits(_ arg0: Float) -> Int32

  @JavaStaticMethod
  public func intBitsToFloat(_ arg0: Int32) -> Float

  @JavaStaticMethod
  public func float16ToFloat(_ arg0: Int16) -> Float

  @JavaStaticMethod
  public func floatToFloat16(_ arg0: Float) -> Int16

  @JavaStaticMethod
  public func compare(_ arg0: Float, _ arg1: Float) -> Int32

  @JavaStaticMethod
  public func valueOf(_ arg0: Float) -> JavaFloat!

  @JavaStaticMethod
  public func valueOf(_ arg0: String) throws -> JavaFloat!

  @JavaStaticMethod
  public func toHexString(_ arg0: Float) -> String

  @JavaStaticMethod
  public func isNaN(_ arg0: Float) -> Bool

  @JavaStaticMethod
  public func sum(_ arg0: Float, _ arg1: Float) -> Float

  @JavaStaticMethod
  public func parseFloat(_ arg0: String) throws -> Float
}
