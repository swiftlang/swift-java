// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.ClassLoader")
open class JavaClassLoader: JavaObject {
  @JavaMethod
  open func getName() -> String

  @JavaMethod
  open func loadClass(_ arg0: String, _ arg1: Bool) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open func loadClass(_ arg0: String) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open func setSigners(_ arg0: JavaClass<JavaObject>?, _ arg1: [JavaObject?])

  @JavaMethod
  open func getClassLoadingLock(_ arg0: String) -> JavaObject!

  @JavaMethod
  open func findLoadedClass(_ arg0: String) -> JavaClass<JavaObject>!

  @JavaMethod
  open func findClass(_ arg0: String) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open func findClass(_ arg0: String, _ arg1: String) -> JavaClass<JavaObject>!

  @JavaMethod
  open func resolveClass(_ arg0: JavaClass<JavaObject>?)

  @JavaMethod
  open func defineClass(_ arg0: String, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open func defineClass(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open func findLibrary(_ arg0: String) -> String

  @JavaMethod
  open func findSystemClass(_ arg0: String) throws -> JavaClass<JavaObject>!

  @JavaMethod
  open func isRegisteredAsParallelCapable() -> Bool

  @JavaMethod
  open func getParent() -> JavaClassLoader!

  @JavaMethod
  open func setDefaultAssertionStatus(_ arg0: Bool)

  @JavaMethod
  open func setPackageAssertionStatus(_ arg0: String, _ arg1: Bool)

  @JavaMethod
  open func setClassAssertionStatus(_ arg0: String, _ arg1: Bool)

  @JavaMethod
  open func clearAssertionStatus()
}
extension JavaClass<JavaClassLoader> {
  @JavaStaticMethod
  public func getPlatformClassLoader() -> JavaClassLoader!

  @JavaStaticMethod
  public func getSystemClassLoader() -> JavaClassLoader!

  @JavaStaticMethod
  public func registerAsParallelCapable() -> Bool
}
