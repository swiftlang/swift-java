// Auto-generated by Java-to-Swift wrapper generator.
import JavaRuntime

@JavaClass("java.lang.Double")
open class JavaDouble: JavaNumber {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Double, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil) throws

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func isInfinite() -> Bool

  @JavaMethod
  open func compareTo(_ arg0: JavaDouble?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open override func byteValue() -> Int8

  @JavaMethod
  open override func shortValue() -> Int16

  @JavaMethod
  open override func intValue() -> Int32

  @JavaMethod
  open override func longValue() -> Int64

  @JavaMethod
  open override func floatValue() -> Float

  @JavaMethod
  open override func doubleValue() -> Double

  @JavaMethod
  open func describeConstable() -> JavaOptional<JavaDouble>!

  open func describeConstableOptional() -> JavaDouble? {
    Optional(javaOptional: describeConstable())
  }

  @JavaMethod
  open func isNaN() -> Bool
}
extension JavaClass<JavaDouble> {
  @JavaStaticField(isFinal: true)
  public var POSITIVE_INFINITY: Double

  @JavaStaticField(isFinal: true)
  public var NEGATIVE_INFINITY: Double

  @JavaStaticField(isFinal: true)
  public var NaN: Double

  @JavaStaticField(isFinal: true)
  public var MAX_VALUE: Double

  @JavaStaticField(isFinal: true)
  public var MIN_NORMAL: Double

  @JavaStaticField(isFinal: true)
  public var MIN_VALUE: Double

  @JavaStaticField(isFinal: true)
  public var SIZE: Int32

  @JavaStaticField(isFinal: true)
  public var PRECISION: Int32

  @JavaStaticField(isFinal: true)
  public var MAX_EXPONENT: Int32

  @JavaStaticField(isFinal: true)
  public var MIN_EXPONENT: Int32

  @JavaStaticField(isFinal: true)
  public var BYTES: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE: JavaClass<JavaDouble>!

  @JavaStaticMethod
  public func toString(_ arg0: Double) -> String

  @JavaStaticMethod
  public func hashCode(_ arg0: Double) -> Int32

  @JavaStaticMethod
  public func min(_ arg0: Double, _ arg1: Double) -> Double

  @JavaStaticMethod
  public func max(_ arg0: Double, _ arg1: Double) -> Double

  @JavaStaticMethod
  public func isInfinite(_ arg0: Double) -> Bool

  @JavaStaticMethod
  public func isFinite(_ arg0: Double) -> Bool

  @JavaStaticMethod
  public func doubleToRawLongBits(_ arg0: Double) -> Int64

  @JavaStaticMethod
  public func doubleToLongBits(_ arg0: Double) -> Int64

  @JavaStaticMethod
  public func longBitsToDouble(_ arg0: Int64) -> Double

  @JavaStaticMethod
  public func compare(_ arg0: Double, _ arg1: Double) -> Int32

  @JavaStaticMethod
  public func valueOf(_ arg0: String) throws -> JavaDouble!

  @JavaStaticMethod
  public func valueOf(_ arg0: Double) -> JavaDouble!

  @JavaStaticMethod
  public func toHexString(_ arg0: Double) -> String

  @JavaStaticMethod
  public func isNaN(_ arg0: Double) -> Bool

  @JavaStaticMethod
  public func sum(_ arg0: Double, _ arg1: Double) -> Double

  @JavaStaticMethod
  public func parseDouble(_ arg0: String) throws -> Double
}
