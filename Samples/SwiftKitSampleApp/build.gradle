//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2024 Apple Inc. and the Swift.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import org.swift.swiftkit.gradle.BuildUtils

import java.nio.file.*

plugins {
    id("build-logic.java-application-conventions")
    id("me.champeau.jmh") version "0.7.2"
}

group = "org.swift.swiftkit"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}


// This is for development, when we edit the Swift swift-java project, the outputs of the generated sources may change.
// Thus, we also need to watch and re-build the top level project.
def compileSwiftJExtractPlugin = tasks.register("compileSwiftJExtractPlugin", Exec) {
    description = "Rebuild the swift-java root project"

    inputs.file(new File(rootDir, "Package.swift"))
    inputs.dir(new File(rootDir, "Sources"))
    outputs.dir(new File(rootDir, ".build"))

    workingDir = rootDir
    commandLine "swift"
    args("build",
            "--product", "SwiftKitSwift",
            "--product", "JExtractSwiftPlugin",
            "--product", "JExtractSwiftCommandPlugin")
}

def jextract = tasks.register("jextract", Exec) {
    description = "Builds swift sources, including swift-java source generation"
    dependsOn compileSwiftJExtractPlugin

    // only because we depend on "live developing" the plugin while using this project to test it
    inputs.file(new File(rootDir, "Package.swift"))
    inputs.dir(new File(rootDir, "Sources"))

    inputs.file(new File(projectDir, "Package.swift"))
    inputs.dir(new File(projectDir, "Sources"))

    // TODO: we can use package describe --type json to figure out which targets depend on JExtractSwiftPlugin and will produce outputs
    //       Avoid adding this directory, but create the expected one specifically for all targets
    //       which WILL produce sources because they have the plugin
    outputs.dir(layout.buildDirectory.dir("../.build/plugins/outputs/${layout.projectDirectory.asFile.getName().toLowerCase()}"))

    File baseSwiftPluginOutputsDir = layout.buildDirectory.dir("../.build/plugins/outputs/").get().asFile
    if (!baseSwiftPluginOutputsDir.exists()) {
        baseSwiftPluginOutputsDir.mkdirs()
    }
    Files.walk(layout.buildDirectory.dir("../.build/plugins/outputs/").get().asFile.toPath()).each {
        // Add any Java sources generated by the plugin to our sourceSet
        if (it.endsWith("JExtractSwiftPlugin/src/generated/java")) {
            outputs.dir(it)
        }
    }

    workingDir = layout.projectDirectory
    commandLine "swift"
    args("package", "jextract", "-v", "--log-level", "info") // TODO: pass log level from Gradle build
}

// Add the java-swift generated Java sources
sourceSets {
    main {
        java {
            srcDir(jextract)
        }
    }
    test {
        java {
            srcDir(jextract)
        }
    }
    jmh {
        java {
            srcDir(jextract)
        }
    }
}

tasks.build {
    dependsOn("jextract")
}


def cleanSwift = tasks.register("cleanSwift", Exec) {
    workingDir = layout.projectDirectory
    commandLine "swift"
    args("package", "clean")
}
tasks.clean {
    dependsOn("cleanSwift")
}

dependencies {
    implementation(project(':SwiftKit'))

    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

application {
    mainClass = "com.example.swift.HelloJava2Swift"

    applicationDefaultJvmArgs = [
        "--enable-native-access=ALL-UNNAMED",

        // Include the library paths where our dylibs are that we want to load and call
        "-Djava.library.path=" +
                (BuildUtils.javaLibraryPaths(rootDir) +
                 BuildUtils.javaLibraryPaths(project.projectDir)).join(":"),


        // Enable tracing downcalls (to Swift)
        "-Djextract.trace.downcalls=true"
    ]
}

jmh {
    jvmArgsAppend = [
        "-Djava.library.path=" +
                (BuildUtils.javaLibraryPaths(rootDir) +
                 BuildUtils.javaLibraryPaths(project.projectDir)).join(":"),
    ]
}
