// Generated by jextract-swift
// Swift module: ExampleSwiftLibrary

package com.example.swift.generated;

import org.swift.swiftkit.*;
import org.swift.swiftkit.SwiftKit;
import org.swift.swiftkit.util.*;
import java.lang.foreign.*;
import java.lang.invoke.*;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.nio.charset.StandardCharsets;

  public final class MySwiftClass implements SwiftHeapObject {
      // Pointer to the referred to class instance's "self".
  private final MemorySegment selfMemorySegment;
  public final MemorySegment $memorySegment() {
    return this.selfMemorySegment;
  }

      static final String LIB_NAME = "ExampleSwiftLibrary";
  static final Arena LIBRARY_ARENA = Arena.ofAuto();

      // TODO: rather than the C ones offer the Swift mappings
  public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
  public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
  public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
  public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
  public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
  public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
  public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
  public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
          .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, ValueLayout.JAVA_BYTE));
  public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    
      public static final ValueLayout.OfBoolean SWIFT_BOOL = ValueLayout.JAVA_BOOLEAN;
  public static final ValueLayout.OfByte SWIFT_INT8 = ValueLayout.JAVA_BYTE;
  public static final ValueLayout.OfChar SWIFT_UINT16 = ValueLayout.JAVA_CHAR;
  public static final ValueLayout.OfShort SWIFT_INT16 = ValueLayout.JAVA_SHORT;
  public static final ValueLayout.OfInt SWIFT_INT32 = ValueLayout.JAVA_INT;
  public static final ValueLayout.OfLong SWIFT_INT64 = ValueLayout.JAVA_LONG;
  public static final ValueLayout.OfFloat SWIFT_FLOAT = ValueLayout.JAVA_FLOAT;
  public static final ValueLayout.OfDouble SWIFT_DOUBLE = ValueLayout.JAVA_DOUBLE;
  public static final AddressLayout SWIFT_POINTER = ValueLayout.ADDRESS;
  // On the platform this was generated on, Int was Int64
  public static final SequenceLayout SWIFT_BYTE_ARRAY = MemoryLayout.sequenceLayout(8, ValueLayout.JAVA_BYTE);
  public static final ValueLayout.OfLong SWIFT_INT = SWIFT_INT64;
  public static final ValueLayout.OfLong SWIFT_UINT = SWIFT_INT64;
  public static final AddressLayout SWIFT_SELF = SWIFT_POINTER;

      private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
    SWIFT_POINTER
  ).withName("$s19ExampleSwiftLibrary02MyB5ClassCMa");
  public final GroupLayout $layout() {
      return $LAYOUT;
  }

      static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");
  static void traceDowncall(Object... args) {
      var ex = new RuntimeException();
      String traceArgs = Arrays.stream(args)
              .map(Object::toString)
              .collect(Collectors.joining(", "));
      System.out.printf("[java][%s:%d] Downcall: %s(%s)\n",
              ex.getStackTrace()[1].getFileName(),
              ex.getStackTrace()[1].getLineNumber(),
              ex.getStackTrace()[1].getMethodName(),
              traceArgs);
  }
  static void trace(Object... args) {
      var ex = new RuntimeException();
      String traceArgs = Arrays.stream(args)
              .map(Object::toString)
              .collect(Collectors.joining(", "));
      System.out.printf("[java][%s:%d] %s: %s\n",
              ex.getStackTrace()[1].getFileName(),
              ex.getStackTrace()[1].getLineNumber(),
              ex.getStackTrace()[1].getMethodName(),
              traceArgs);
  }

      static {
      System.loadLibrary("swiftCore");
      System.loadLibrary(LIB_NAME);
  }

      public static final String TYPE_MANGLED_NAME = "$s19ExampleSwiftLibrary02MyB5ClassCMa";
  public static final SwiftAnyType TYPE_METADATA = SwiftKit.getTypeByMangledNameInEnvironment(TYPE_MANGLED_NAME).get();
  public final SwiftAnyType $swiftType() {
      return TYPE_METADATA;
  }

    
      // ==== --------------------------------------------------
  // init(len:cap:)

      private static class init_len_cap {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.of(
                /* -> */SWIFT_POINTER,
            SWIFT_INT,
            SWIFT_INT,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR = ExampleSwiftLibrary.findOrThrow("$s19ExampleSwiftLibrary02MyB5ClassC3len3capACSi_SitcfC");
        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printClassConstructors(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:400
      /**
   * Create an instance of {@code MySwiftClass}.
   *
   * {@snippet lang=swift :
  * public init(len: Swift.Int, cap: Swift.Int)
  * }
   */
  public MySwiftClass(long len, long cap) {
    this(/*arena=*/null, len, cap);
  }

      /**
   * Create an instance of {@code MySwiftClass}.
   * This instance is managed by the passed in {@link SwiftArena} and may not outlive the arena's lifetime.
   *
   * {@snippet lang=swift :
  * public init(len: Swift.Int, cap: Swift.Int)
  * }
   */
  public MySwiftClass(SwiftArena arena, long len, long cap) {
    var mh$ = init_len_cap.HANDLE;
    try {
        if (TRACE_DOWNCALLS) {
          traceDowncall(len, cap);
        }
        this.selfMemorySegment = (MemorySegment) mh$.invokeExact(len, cap, TYPE_METADATA.$memorySegment());
        if (arena != null) {
            arena.register(this);
        }
    } catch (Throwable ex$) {
        throw new AssertionError("should not reach here", ex$);
    }
  }

      // ==== --------------------------------------------------
  // len

      private static class len {
        public static final FunctionDescriptor DESC_GET =     FunctionDescriptor.of(
                /* -> */SWIFT_INT,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR_GET = ExampleSwiftLibrary.findOrThrow("g");
        public static final MethodHandle HANDLE_GET = Linker.nativeLinker().downcallHandle(ADDR_GET, DESC_GET);
        public static final FunctionDescriptor DESC_SET =     FunctionDescriptor.ofVoid(
          SWIFT_INT,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR_SET = ExampleSwiftLibrary.findOrThrow("s");
        public static final MethodHandle HANDLE_SET = Linker.nativeLinker().downcallHandle(ADDR_SET, DESC_SET);
      } // printVariableDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:553
      /**
   * Function descriptor for:
   * 
   */
  public static FunctionDescriptor len$get$descriptor() {
      return len.DESC_GET;
  }

      /**
   * Downcall method handle for:
   * 
   */
  public static MethodHandle len$get$handle() {
      return len.HANDLE_GET;
  }

      /**
   * Address for:
   * 
   */
  public static MemorySegment len$get$address() {
      return len.ADDR_GET;
  }

      /**
   * Function descriptor for:
   * 
   */
  public static FunctionDescriptor len$set$descriptor() {
      return len.DESC_SET;
  }

      /**
   * Downcall method handle for:
   * 
   */
  public static MethodHandle len$set$handle() {
      return len.HANDLE_SET;
  }

      /**
   * Address for:
   * 
   */
  public static MemorySegment len$set$address() {
      return len.ADDR_SET;
  }

      /**
   * Downcall to Swift:
   * 
   */
  public static long getLen(java.lang.foreign.MemorySegment self$) {
    var mh$ = len.HANDLE_GET;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(self$);
      }
      return (long) mh$.invokeExact(self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * 
   */
  public long getLen() {
    return (long) getLen($memorySegment());
  }

      /**
   * Downcall to Swift:
   * 
   */
  public static void setLen(long newValue, java.lang.foreign.MemorySegment self$) {
    var mh$ = len.HANDLE_SET;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(newValue, self$);
      }
       mh$.invokeExact(newValue, self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * 
   */
  public void setLen(long newValue) {
     setLen(newValue, $memorySegment());
  }

      // ==== --------------------------------------------------
  // cap

      private static class cap {
        public static final FunctionDescriptor DESC_GET =     FunctionDescriptor.of(
                /* -> */SWIFT_INT,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR_GET = ExampleSwiftLibrary.findOrThrow("g");
        public static final MethodHandle HANDLE_GET = Linker.nativeLinker().downcallHandle(ADDR_GET, DESC_GET);
        public static final FunctionDescriptor DESC_SET =     FunctionDescriptor.ofVoid(
          SWIFT_INT,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR_SET = ExampleSwiftLibrary.findOrThrow("s");
        public static final MethodHandle HANDLE_SET = Linker.nativeLinker().downcallHandle(ADDR_SET, DESC_SET);
      } // printVariableDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:553
      /**
   * Function descriptor for:
   * 
   */
  public static FunctionDescriptor cap$get$descriptor() {
      return cap.DESC_GET;
  }

      /**
   * Downcall method handle for:
   * 
   */
  public static MethodHandle cap$get$handle() {
      return cap.HANDLE_GET;
  }

      /**
   * Address for:
   * 
   */
  public static MemorySegment cap$get$address() {
      return cap.ADDR_GET;
  }

      /**
   * Function descriptor for:
   * 
   */
  public static FunctionDescriptor cap$set$descriptor() {
      return cap.DESC_SET;
  }

      /**
   * Downcall method handle for:
   * 
   */
  public static MethodHandle cap$set$handle() {
      return cap.HANDLE_SET;
  }

      /**
   * Address for:
   * 
   */
  public static MemorySegment cap$set$address() {
      return cap.ADDR_SET;
  }

      /**
   * Downcall to Swift:
   * 
   */
  public static long getCap(java.lang.foreign.MemorySegment self$) {
    var mh$ = cap.HANDLE_GET;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(self$);
      }
      return (long) mh$.invokeExact(self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * 
   */
  public long getCap() {
    return (long) getCap($memorySegment());
  }

      /**
   * Downcall to Swift:
   * 
   */
  public static void setCap(long newValue, java.lang.foreign.MemorySegment self$) {
    var mh$ = cap.HANDLE_SET;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(newValue, self$);
      }
       mh$.invokeExact(newValue, self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * 
   */
  public void setCap(long newValue) {
     setCap(newValue, $memorySegment());
  }

      // ==== --------------------------------------------------
  // counter

      private static class counter {
        public static final FunctionDescriptor DESC_GET =     FunctionDescriptor.of(
                /* -> */SWIFT_INT32,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR_GET = ExampleSwiftLibrary.findOrThrow("g");
        public static final MethodHandle HANDLE_GET = Linker.nativeLinker().downcallHandle(ADDR_GET, DESC_GET);
        public static final FunctionDescriptor DESC_SET =     FunctionDescriptor.ofVoid(
          SWIFT_INT32,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR_SET = ExampleSwiftLibrary.findOrThrow("s");
        public static final MethodHandle HANDLE_SET = Linker.nativeLinker().downcallHandle(ADDR_SET, DESC_SET);
      } // printVariableDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:553
      /**
   * Function descriptor for:
   * 
   */
  public static FunctionDescriptor counter$get$descriptor() {
      return counter.DESC_GET;
  }

      /**
   * Downcall method handle for:
   * 
   */
  public static MethodHandle counter$get$handle() {
      return counter.HANDLE_GET;
  }

      /**
   * Address for:
   * 
   */
  public static MemorySegment counter$get$address() {
      return counter.ADDR_GET;
  }

      /**
   * Function descriptor for:
   * 
   */
  public static FunctionDescriptor counter$set$descriptor() {
      return counter.DESC_SET;
  }

      /**
   * Downcall method handle for:
   * 
   */
  public static MethodHandle counter$set$handle() {
      return counter.HANDLE_SET;
  }

      /**
   * Address for:
   * 
   */
  public static MemorySegment counter$set$address() {
      return counter.ADDR_SET;
  }

      /**
   * Downcall to Swift:
   * 
   */
  public static int getCounter(java.lang.foreign.MemorySegment self$) {
    var mh$ = counter.HANDLE_GET;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(self$);
      }
      return (int) mh$.invokeExact(self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * 
   */
  public int getCounter() {
    return (int) getCounter($memorySegment());
  }

      /**
   * Downcall to Swift:
   * 
   */
  public static void setCounter(int newValue, java.lang.foreign.MemorySegment self$) {
    var mh$ = counter.HANDLE_SET;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(newValue, self$);
      }
       mh$.invokeExact(newValue, self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * 
   */
  public void setCounter(int newValue) {
     setCounter(newValue, $memorySegment());
  }

      // ==== --------------------------------------------------
  // voidMethod

      private static class voidMethod {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.ofVoid(
          SWIFT_POINTER
          );
        public static final MemorySegment ADDR = ExampleSwiftLibrary.findOrThrow("$s19ExampleSwiftLibrary02MyB5ClassC10voidMethodyyF");
        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printFunctionDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:470
      /**
   * Function descriptor for:
   * {@snippet lang=swift :
  * public func voidMethod()
  * }
   */
  public static FunctionDescriptor voidMethod$descriptor() {
      return voidMethod.DESC;
  }

      /**
   * Downcall method handle for:
   * {@snippet lang=swift :
  * public func voidMethod()
  * }
   */
  public static MethodHandle voidMethod$handle() {
      return voidMethod.HANDLE;
  }

      /**
   * Address for:
   * {@snippet lang=swift :
  * public func voidMethod()
  * }
   */
  public static MemorySegment voidMethod$address() {
      return voidMethod.ADDR;
  }

      /**
   * Downcall to Swift:
   * {@snippet lang=swift :
  * public func voidMethod()
  * }
   */
  public static void voidMethod(java.lang.foreign.MemorySegment self$) {
    var mh$ = voidMethod.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(self$);
      }
       mh$.invokeExact(self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * {@snippet lang=swift :
  * public func voidMethod()
  * }
   */
  public void voidMethod() {
     voidMethod($memorySegment());
  }

      // ==== --------------------------------------------------
  // takeIntMethod

      private static class takeIntMethod {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.ofVoid(
          SWIFT_INT,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR = ExampleSwiftLibrary.findOrThrow("$s19ExampleSwiftLibrary02MyB5ClassC13takeIntMethod1iySi_tF");
        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printFunctionDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:470
      /**
   * Function descriptor for:
   * {@snippet lang=swift :
  * public func takeIntMethod(i: Swift.Int)
  * }
   */
  public static FunctionDescriptor takeIntMethod$descriptor() {
      return takeIntMethod.DESC;
  }

      /**
   * Downcall method handle for:
   * {@snippet lang=swift :
  * public func takeIntMethod(i: Swift.Int)
  * }
   */
  public static MethodHandle takeIntMethod$handle() {
      return takeIntMethod.HANDLE;
  }

      /**
   * Address for:
   * {@snippet lang=swift :
  * public func takeIntMethod(i: Swift.Int)
  * }
   */
  public static MemorySegment takeIntMethod$address() {
      return takeIntMethod.ADDR;
  }

      /**
   * Downcall to Swift:
   * {@snippet lang=swift :
  * public func takeIntMethod(i: Swift.Int)
  * }
   */
  public static void takeIntMethod(long i, java.lang.foreign.MemorySegment self$) {
    var mh$ = takeIntMethod.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(i, self$);
      }
       mh$.invokeExact(i, self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * {@snippet lang=swift :
  * public func takeIntMethod(i: Swift.Int)
  * }
   */
  public void takeIntMethod(long i) {
     takeIntMethod(i, $memorySegment());
  }

      // ==== --------------------------------------------------
  // echoIntMethod

      private static class echoIntMethod {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.of(
                /* -> */SWIFT_INT,
            SWIFT_INT,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR = ExampleSwiftLibrary.findOrThrow("$s19ExampleSwiftLibrary02MyB5ClassC13echoIntMethod1iS2i_tF");
        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printFunctionDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:470
      /**
   * Function descriptor for:
   * {@snippet lang=swift :
  * public func echoIntMethod(i: Swift.Int) -> Swift.Int
  * }
   */
  public static FunctionDescriptor echoIntMethod$descriptor() {
      return echoIntMethod.DESC;
  }

      /**
   * Downcall method handle for:
   * {@snippet lang=swift :
  * public func echoIntMethod(i: Swift.Int) -> Swift.Int
  * }
   */
  public static MethodHandle echoIntMethod$handle() {
      return echoIntMethod.HANDLE;
  }

      /**
   * Address for:
   * {@snippet lang=swift :
  * public func echoIntMethod(i: Swift.Int) -> Swift.Int
  * }
   */
  public static MemorySegment echoIntMethod$address() {
      return echoIntMethod.ADDR;
  }

      /**
   * Downcall to Swift:
   * {@snippet lang=swift :
  * public func echoIntMethod(i: Swift.Int) -> Swift.Int
  * }
   */
  public static long echoIntMethod(long i, java.lang.foreign.MemorySegment self$) {
    var mh$ = echoIntMethod.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(i, self$);
      }
      return (long) mh$.invokeExact(i, self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * {@snippet lang=swift :
  * public func echoIntMethod(i: Swift.Int) -> Swift.Int
  * }
   */
  public long echoIntMethod(long i) {
    return (long) echoIntMethod(i, $memorySegment());
  }

      // ==== --------------------------------------------------
  // makeIntMethod

      private static class makeIntMethod {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.of(
                /* -> */SWIFT_INT,
            SWIFT_POINTER
          );
        public static final MemorySegment ADDR = ExampleSwiftLibrary.findOrThrow("$s19ExampleSwiftLibrary02MyB5ClassC13makeIntMethodSiyF");
        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printFunctionDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:470
      /**
   * Function descriptor for:
   * {@snippet lang=swift :
  * public func makeIntMethod() -> Swift.Int
  * }
   */
  public static FunctionDescriptor makeIntMethod$descriptor() {
      return makeIntMethod.DESC;
  }

      /**
   * Downcall method handle for:
   * {@snippet lang=swift :
  * public func makeIntMethod() -> Swift.Int
  * }
   */
  public static MethodHandle makeIntMethod$handle() {
      return makeIntMethod.HANDLE;
  }

      /**
   * Address for:
   * {@snippet lang=swift :
  * public func makeIntMethod() -> Swift.Int
  * }
   */
  public static MemorySegment makeIntMethod$address() {
      return makeIntMethod.ADDR;
  }

      /**
   * Downcall to Swift:
   * {@snippet lang=swift :
  * public func makeIntMethod() -> Swift.Int
  * }
   */
  public static long makeIntMethod(java.lang.foreign.MemorySegment self$) {
    var mh$ = makeIntMethod.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(self$);
      }
      return (long) mh$.invokeExact(self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * Downcall to Swift:
   * {@snippet lang=swift :
  * public func makeIntMethod() -> Swift.Int
  * }
   */
  public long makeIntMethod() {
    return (long) makeIntMethod($memorySegment());
  }

      @Override
  public String toString() {
      return getClass().getSimpleName() + "(" +
              SwiftKit.nameOfSwiftType($swiftType().$memorySegment(), true) +
              ")@" + $memorySegment();
  }

  } // printClass(_:_:body:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:182
