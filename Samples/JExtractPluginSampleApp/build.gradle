//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2024 Apple Inc. and the Swift.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import org.swift.swiftkit.gradle.BuildUtils

plugins {
    id("build-logic.java-application-conventions")
//     id("me.champeau.jmh") version "0.7.2"
}

group = "org.swift.swiftkit"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}


def jextract = tasks.register("swift-build", Exec) {
    description = "Builds swift sources, including swift-java source generation"

    // monitor project Swift sources:
    inputs.dir(layout.projectDirectory.dir("Sources/"))

    // monitor root java-swift sources (including source generator libs which may be changing):
    inputs.dir("$rootDir/Sources")

    // the swift-java produced Java sources are located here:
    outputs.dir(layout.buildDirectory.dir("../.build/plugins/outputs/jextractpluginsampleapp/JExtractPluginSampleLib/destination/JExtractSwiftPlugin/src/generated/java"))

    workingDir = rootDir
    commandLine "swift"
    args "build"
}

// Add the java-swift generated Java sources
sourceSets {
    main {
        java {
            srcDir(jextract)
        }
    }
}

dependencies {
    implementation(project(':SwiftKit'))

    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

application {
    mainClass = "com.example.swift.HelloJava2Swift"

    // In order to silence:
    //   WARNING: A restricted method in java.lang.foreign.SymbolLookup has been called
    //   WARNING: java.lang.foreign.SymbolLookup::libraryLookup has been called by org.example.swift.JavaKitExample in an unnamed module
    //   WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
    //   WARNING: Restricted methods will be blocked in a future release unless native access is enabled
    // FIXME: Find out the proper solution to this
    applicationDefaultJvmArgs = [
        "--enable-native-access=ALL-UNNAMED",

        // Include the library paths where our dylibs are that we want to load and call
        "-Djava.library.path=" + BuildUtils.javaLibraryPaths(rootDir).join(":"),

        // Enable tracing downcalls (to Swift)
        "-Djextract.trace.downcalls=true"
    ]
}
